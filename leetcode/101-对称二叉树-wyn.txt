          1
         / \
       2   2
      / \   / \
     3  4  4  3
   / \ / \ / \ / \
  5 65 6 6 5 6 5
法1：队列  12ms 12.8M
q:2 2
q:3.1 3.2 4.1 4.2
q:41 42 51 54 61 64 
q:51 54 61 64 52 53 62 63

bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        queue<TreeNode*> q;
        q.push(root->left);
        q.push(root->right);
        while(!q.empty()){
            TreeNode* t1=q.front();
            q.pop();
            TreeNode* t2=q.front();
            q.pop();
            if(!t1 && !t2) continue;
            if(!t1 || !t2) return false;
            if(t1->val!=t2->val) return false;
            q.push(t1->left);
            q.push(t2->right);
            q.push(t1->right);
            q.push(t2->left);
        }
        return true;
    }

法2：队列 4ms 12.6M
思路和队列一模一样
bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        stack<TreeNode*> q;
        q.push(root->left);
        q.push(root->right);
        while(!q.empty()){
            TreeNode* t1=q.top();
            q.pop();
            TreeNode* t2=q.top();
            q.pop();
            if(!t1 && !t2) continue;
            if(!t1 || !t2) return false;
            if(t1->val!=t2->val) return false;
            q.push(t1->left);
            q.push(t2->right);
            q.push(t1->right);
            q.push(t2->left);
        }
        return true;
    }

法3：递归  9ms 12.9M
bool isSymmetric(TreeNode* root) {
        if(root==NULL) return true;
        TreeNode* t1=root->left;
        TreeNode* t2=root->right;
        return isMir(t1,t2);
    }
    bool isMir(TreeNode* t1,TreeNode* t2) {
        if(!t1 && !t2) return true;
        if(!t1 || !t2) return false;       
        return (t1->val==t2->val) && isMir(t1->left,t2->right) &&  isMir(t1->right,t2->left);
    }
